type Room
  # @aws_api_key
  @aws_cognito_user_pools
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", mutations: [create, update, delete] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  createdAt: String
  updatedAt: String
  owner: String
  messages: [Message]
    @connection(name: "RoomMessages", keyField: "roomId", sortField: "when")
}

type Message
  # @aws_api_key
  @aws_cognito_user_pools
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", mutations: [create, update, delete] }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  when: String!
  roomId: ID
  owner: String
  room: Room @connection(name: "RoomMessages", keyField: "roomId")
}

type Subscription {
  onCreateMessage(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
}
